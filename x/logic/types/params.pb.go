// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logic/v1beta/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines all the configuration parameters of the "logic" module.
type Params struct {
	// Interpreter specifies the parameter for the logic interpreter.
	Interpreter Interpreter `protobuf:"bytes,1,opt,name=interpreter,proto3" json:"interpreter" yaml:"interpreter"`
	// Limits defines the limits of the logic module.
	// The limits are used to prevent the interpreter from running for too long.
	// If the interpreter runs for too long, the execution will be aborted.
	Limits Limits `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits" yaml:"limits"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_55eca4aea58a32e5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetInterpreter() Interpreter {
	if m != nil {
		return m.Interpreter
	}
	return Interpreter{}
}

func (m *Params) GetLimits() Limits {
	if m != nil {
		return m.Limits
	}
	return Limits{}
}

// Limits defines the limits of the logic module.
type Limits struct {
	// max_gas specifies the maximum amount of computing power, measured in "gas," that is allowed to be consumed when
	// executing a request by the interpreter. The interpreter calculates the gas consumption based on the number and type
	// of operations that are executed, as well as, in some cases, the complexity of the processed data.
	MaxGas uint64 `protobuf:"varint,1,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty" yaml:"max_gas",omitempty`
	// max_size specifies the maximum size, in bytes, that is accepted for a program.
	MaxSize uint32 `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty" yaml:"max_size"`
	// max_result_count specifies the maximum number of results that can be requested for a query.
	MaxResultCount uint32 `protobuf:"varint,2,opt,name=max_result_count,json=maxResultCount,proto3" json:"max_result_count,omitempty" yaml:"max_result_count"`
}

func (m *Limits) Reset()         { *m = Limits{} }
func (m *Limits) String() string { return proto.CompactTextString(m) }
func (*Limits) ProtoMessage()    {}
func (*Limits) Descriptor() ([]byte, []int) {
	return fileDescriptor_55eca4aea58a32e5, []int{1}
}
func (m *Limits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Limits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Limits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Limits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Limits.Merge(m, src)
}
func (m *Limits) XXX_Size() int {
	return m.Size()
}
func (m *Limits) XXX_DiscardUnknown() {
	xxx_messageInfo_Limits.DiscardUnknown(m)
}

var xxx_messageInfo_Limits proto.InternalMessageInfo

func (m *Limits) GetMaxGas() uint64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

func (m *Limits) GetMaxSize() uint32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *Limits) GetMaxResultCount() uint32 {
	if m != nil {
		return m.MaxResultCount
	}
	return 0
}

// Interpreter defines the various parameters for the interpreter.
type Interpreter struct {
	// registered_predicates specifies the list of registered predicates/operators, in the form of: `<predicate_name>/<arity>`.
	// For instance: `findall/3`.
	// If not specified, the default set of predicates/operators will be registered.
	RegisteredPredicates []string `protobuf:"bytes,1,rep,name=registered_predicates,json=registeredPredicates,proto3" json:"registered_predicates,omitempty" yaml:"registered_predicates"`
	// bootstrap specifies the initial program to run when booting the logic interpreter.
	// If not specified, the default boot sequence will be executed.
	Bootstrap string `protobuf:"bytes,2,opt,name=bootstrap,proto3" json:"bootstrap,omitempty" yaml:"bootstrap"`
}

func (m *Interpreter) Reset()         { *m = Interpreter{} }
func (m *Interpreter) String() string { return proto.CompactTextString(m) }
func (*Interpreter) ProtoMessage()    {}
func (*Interpreter) Descriptor() ([]byte, []int) {
	return fileDescriptor_55eca4aea58a32e5, []int{2}
}
func (m *Interpreter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interpreter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interpreter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interpreter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interpreter.Merge(m, src)
}
func (m *Interpreter) XXX_Size() int {
	return m.Size()
}
func (m *Interpreter) XXX_DiscardUnknown() {
	xxx_messageInfo_Interpreter.DiscardUnknown(m)
}

var xxx_messageInfo_Interpreter proto.InternalMessageInfo

func (m *Interpreter) GetRegisteredPredicates() []string {
	if m != nil {
		return m.RegisteredPredicates
	}
	return nil
}

func (m *Interpreter) GetBootstrap() string {
	if m != nil {
		return m.Bootstrap
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "logic.v1beta.Params")
	proto.RegisterType((*Limits)(nil), "logic.v1beta.Limits")
	proto.RegisterType((*Interpreter)(nil), "logic.v1beta.Interpreter")
}

func init() { proto.RegisterFile("logic/v1beta/params.proto", fileDescriptor_55eca4aea58a32e5) }

var fileDescriptor_55eca4aea58a32e5 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x6e, 0xd3, 0x30,
	0x00, 0xc7, 0x63, 0x36, 0x05, 0xea, 0x52, 0x98, 0x4c, 0x27, 0xb2, 0x31, 0x25, 0x93, 0xe1, 0xd0,
	0x03, 0x4a, 0xc4, 0xe7, 0x61, 0x12, 0x97, 0x4c, 0x08, 0x21, 0x71, 0x98, 0xcc, 0x01, 0xc1, 0xa5,
	0x72, 0x5b, 0x2b, 0x58, 0xd4, 0xb3, 0x65, 0xbb, 0xa8, 0xdd, 0x53, 0x70, 0xe4, 0xc8, 0x89, 0x13,
	0x8f, 0xc0, 0x03, 0xf4, 0xb8, 0x23, 0xa7, 0x08, 0xb5, 0x6f, 0x90, 0x27, 0x40, 0xb1, 0xa3, 0x25,
	0x48, 0xbb, 0x44, 0xd1, 0xff, 0xe3, 0x97, 0xbf, 0x23, 0xc3, 0x83, 0xb9, 0x2c, 0xf8, 0x34, 0xfb,
	0xfa, 0x64, 0xc2, 0x2c, 0xcd, 0x14, 0xd5, 0x54, 0x98, 0x54, 0x69, 0x69, 0x25, 0xba, 0xed, 0xac,
	0xd4, 0x5b, 0x87, 0xc3, 0x42, 0x16, 0xd2, 0x19, 0x59, 0xfd, 0xe6, 0x33, 0xf8, 0x17, 0x80, 0xe1,
	0x99, 0x2b, 0xa1, 0x0f, 0xb0, 0xcf, 0xcf, 0x2d, 0xd3, 0x4a, 0x33, 0xcb, 0x74, 0x04, 0x8e, 0xc1,
	0xa8, 0xff, 0xf4, 0x20, 0xed, 0x42, 0xd2, 0xb7, 0x6d, 0x20, 0x3f, 0x5c, 0x97, 0x49, 0x50, 0x95,
	0x09, 0x5a, 0x51, 0x31, 0x3f, 0xc1, 0x9d, 0x2e, 0x26, 0x5d, 0x12, 0x3a, 0x85, 0xe1, 0x9c, 0x0b,
	0x6e, 0x4d, 0x74, 0xc3, 0x31, 0x87, 0xff, 0x33, 0xdf, 0x39, 0x2f, 0xdf, 0x6f, 0x70, 0x03, 0x8f,
	0xf3, 0x0d, 0x4c, 0x9a, 0xea, 0xc9, 0xee, 0xf7, 0x1f, 0x49, 0x80, 0x7f, 0x03, 0x18, 0xfa, 0x3c,
	0x7a, 0x01, 0x6f, 0x0a, 0xba, 0x1c, 0x17, 0xd4, 0xb8, 0xa9, 0xbb, 0xf9, 0x51, 0x55, 0x26, 0x91,
	0x2f, 0x37, 0x06, 0x7e, 0x2c, 0x05, 0xb7, 0x4c, 0x28, 0xbb, 0x22, 0xa1, 0xa0, 0xcb, 0x37, 0xd4,
	0xa0, 0x14, 0xde, 0xaa, 0x5d, 0xc3, 0x2f, 0x58, 0xb4, 0x73, 0x0c, 0x46, 0x83, 0xfc, 0x5e, 0x55,
	0x26, 0x77, 0xdb, 0x5e, 0xed, 0x60, 0x52, 0xb3, 0xdf, 0xf3, 0x0b, 0x86, 0x5e, 0xc3, 0xbd, 0x5a,
	0xd5, 0xcc, 0x2c, 0xe6, 0x76, 0x3c, 0x95, 0x8b, 0x73, 0xeb, 0x8e, 0x31, 0xc8, 0x1f, 0x54, 0x65,
	0x72, 0xbf, 0xed, 0x75, 0x13, 0x98, 0xdc, 0x11, 0x74, 0x49, 0x9c, 0x72, 0x5a, 0x0b, 0x6e, 0x3e,
	0xc0, 0x3f, 0x01, 0xec, 0x77, 0x7e, 0x21, 0xfa, 0x08, 0xf7, 0x35, 0x2b, 0xb8, 0xb1, 0x4c, 0xb3,
	0xd9, 0x58, 0x69, 0x36, 0xe3, 0x53, 0x6a, 0x59, 0x7d, 0xa2, 0x9d, 0x51, 0x2f, 0x7f, 0xb4, 0x2e,
	0x13, 0x50, 0x95, 0xc9, 0x91, 0xff, 0xca, 0xb5, 0x51, 0x4c, 0x86, 0xad, 0x7e, 0x76, 0x25, 0xa3,
	0x97, 0xb0, 0x37, 0x91, 0xd2, 0x1a, 0xab, 0xa9, 0x72, 0x83, 0x7b, 0x79, 0xd4, 0xe0, 0xf6, 0x3c,
	0xee, 0xca, 0xc6, 0xa4, 0x8d, 0xfa, 0xa1, 0xf9, 0xab, 0xf5, 0x26, 0x06, 0x97, 0x9b, 0x18, 0xfc,
	0xdd, 0xc4, 0xe0, 0xdb, 0x36, 0x0e, 0x2e, 0xb7, 0x71, 0xf0, 0x67, 0x1b, 0x07, 0x9f, 0x1e, 0x16,
	0xdc, 0x7e, 0x5e, 0x4c, 0xd2, 0xa9, 0x14, 0x99, 0xfc, 0xa2, 0x9e, 0xbb, 0xc7, 0x2c, 0x5b, 0x66,
	0xfe, 0x1e, 0xda, 0x95, 0x62, 0x66, 0x12, 0xba, 0xcb, 0xf5, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4b, 0xe5, 0xff, 0xbe, 0x9d, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Interpreter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Limits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Limits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxResultCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxResultCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxGas != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxGas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Interpreter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interpreter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interpreter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bootstrap) > 0 {
		i -= len(m.Bootstrap)
		copy(dAtA[i:], m.Bootstrap)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Bootstrap)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegisteredPredicates) > 0 {
		for iNdEx := len(m.RegisteredPredicates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegisteredPredicates[iNdEx])
			copy(dAtA[i:], m.RegisteredPredicates[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.RegisteredPredicates[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Interpreter.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Limits.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Limits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGas != 0 {
		n += 1 + sovParams(uint64(m.MaxGas))
	}
	if m.MaxResultCount != 0 {
		n += 1 + sovParams(uint64(m.MaxResultCount))
	}
	if m.MaxSize != 0 {
		n += 1 + sovParams(uint64(m.MaxSize))
	}
	return n
}

func (m *Interpreter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredPredicates) > 0 {
		for _, s := range m.RegisteredPredicates {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.Bootstrap)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpreter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interpreter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGas", wireType)
			}
			m.MaxGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultCount", wireType)
			}
			m.MaxResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxResultCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interpreter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interpreter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interpreter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredPredicates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredPredicates = append(m.RegisteredPredicates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootstrap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
