// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logic/v1beta2/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines all the configuration parameters of the "logic" module.
type Params struct {
	// Interpreter specifies the parameter for the logic interpreter.
	Interpreter Interpreter `protobuf:"bytes,1,opt,name=interpreter,proto3" json:"interpreter" yaml:"interpreter"`
	// Limits defines the limits of the logic module.
	// The limits are used to prevent the interpreter from running for too long.
	// If the interpreter runs for too long, the execution will be aborted.
	Limits Limits `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits" yaml:"limits"`
	// GasPolicy defines the parameters for calculating predicate invocation costs.
	GasPolicy GasPolicy `protobuf:"bytes,3,opt,name=gas_policy,json=gasPolicy,proto3" json:"gas_policy" yaml:"gas_policy"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af0daa241de0fa3, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetInterpreter() Interpreter {
	if m != nil {
		return m.Interpreter
	}
	return Interpreter{}
}

func (m *Params) GetLimits() Limits {
	if m != nil {
		return m.Limits
	}
	return Limits{}
}

func (m *Params) GetGasPolicy() GasPolicy {
	if m != nil {
		return m.GasPolicy
	}
	return GasPolicy{}
}

// Limits defines the limits of the logic module.
type Limits struct {
	// max_gas specifies the maximum amount of computing power, measured in "gas," that is allowed to be consumed when
	// executing a request by the interpreter. The interpreter calculates the gas consumption based on the number and type
	// of operations that are executed, as well as, in some cases, the complexity of the processed data.
	// nil value remove max gas limitation.
	MaxGas *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=max_gas,json=maxGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_gas,omitempty" yaml:"max_gas",omitempty`
	// max_size specifies the maximum size, in bytes, that is accepted for a program.
	// nil value remove size limitation.
	MaxSize *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=max_size,json=maxSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_size,omitempty" yaml:"max_size"`
	// max_result_count specifies the maximum number of results that can be requested for a query.
	// nil value remove max result count limitation.
	MaxResultCount *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=max_result_count,json=maxResultCount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_result_count,omitempty" yaml:"max_result_count"`
	// max_user_output_size specifies the maximum number of bytes to keep in the user output. If the user output exceeds
	// this size, the interpreter will overwrite the oldest bytes with the new ones to keep the size constant.
	// nil value or 0 value means that no user output is used at all.
	MaxUserOutputSize *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=max_user_output_size,json=maxUserOutputSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_user_output_size,omitempty" yaml:"max_user_output_size"`
}

func (m *Limits) Reset()         { *m = Limits{} }
func (m *Limits) String() string { return proto.CompactTextString(m) }
func (*Limits) ProtoMessage()    {}
func (*Limits) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af0daa241de0fa3, []int{1}
}
func (m *Limits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Limits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Limits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Limits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Limits.Merge(m, src)
}
func (m *Limits) XXX_Size() int {
	return m.Size()
}
func (m *Limits) XXX_DiscardUnknown() {
	xxx_messageInfo_Limits.DiscardUnknown(m)
}

var xxx_messageInfo_Limits proto.InternalMessageInfo

// Interpreter defines the various parameters for the interpreter.
type Interpreter struct {
	// predicates_whitelist specifies a list of prolog predicates that are allowed and can be used by the interpreter.
	// The predicates are represented as `<predicate_name>/[<arity>]`, for example: `findall/3`, or `call`. If a predicate name without arity
	// is included in this list, then all predicates with that name will be considered regardless of arity. For example, if `call` is included
	// in the whitelist, then all predicates `call/1`, `call/2`, `call/3`... will be allowed.
	// If this field is not specified, the interpreter will use the default set of predicates.
	PredicatesWhitelist []string `protobuf:"bytes,1,rep,name=predicates_whitelist,json=predicatesWhitelist,proto3" json:"predicates_whitelist,omitempty" yaml:"predicates_whitelist"`
	// predicates_blacklist specifies a list of prolog predicates that are excluded from the set of registered predicates
	// and can never be executed by the interpreter.
	// The predicates are represented as `<predicate_name>/[<arity>]`, for example: `findall/3`, or `call`. If a predicate name without arity
	// is included in this list, then all predicates with that name will be considered regardless of arity. For example, if `call` is included
	// in the blacklist, then all predicates `call/1`, `call/2`, `call/3`... will be excluded.
	// If a predicate is included in both whitelist and blacklist, it will be excluded. This means that blacklisted predicates prevails
	// on whitelisted predicates.
	PredicatesBlacklist []string `protobuf:"bytes,2,rep,name=predicates_blacklist,json=predicatesBlacklist,proto3" json:"predicates_blacklist,omitempty" yaml:"predicates_blacklist"`
	// bootstrap specifies the initial program to run when booting the logic interpreter.
	// If not specified, the default boot sequence will be executed.
	Bootstrap string `protobuf:"bytes,3,opt,name=bootstrap,proto3" json:"bootstrap,omitempty" yaml:"bootstrap"`
}

func (m *Interpreter) Reset()         { *m = Interpreter{} }
func (m *Interpreter) String() string { return proto.CompactTextString(m) }
func (*Interpreter) ProtoMessage()    {}
func (*Interpreter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af0daa241de0fa3, []int{2}
}
func (m *Interpreter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interpreter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interpreter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interpreter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interpreter.Merge(m, src)
}
func (m *Interpreter) XXX_Size() int {
	return m.Size()
}
func (m *Interpreter) XXX_DiscardUnknown() {
	xxx_messageInfo_Interpreter.DiscardUnknown(m)
}

var xxx_messageInfo_Interpreter proto.InternalMessageInfo

func (m *Interpreter) GetPredicatesWhitelist() []string {
	if m != nil {
		return m.PredicatesWhitelist
	}
	return nil
}

func (m *Interpreter) GetPredicatesBlacklist() []string {
	if m != nil {
		return m.PredicatesBlacklist
	}
	return nil
}

func (m *Interpreter) GetBootstrap() string {
	if m != nil {
		return m.Bootstrap
	}
	return ""
}

// GasPolicy defines the policy for calculating predicate invocation costs and the resulting gas consumption.
// The gas policy is defined as a list of predicates and their associated unit costs, a default unit cost for predicates
// if not specified in the list, and a weighting factor that is applied to the unit cost of each predicate to yield.
type GasPolicy struct {
	// WeightingFactor is the factor that is applied to the unit cost of each predicate
	// to yield the gas value.
	// If not provided or set to 0, the value is set to 1.
	WeightingFactor *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=weighting_factor,json=weightingFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"weighting_factor,omitempty" yaml:"weighting_factor"`
	// DefaultPredicateCost is the default unit cost of a predicate when not specified in the PredicateCosts list.
	// If not provided or set to 0, the value is set to 1.
	DefaultPredicateCost *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=default_predicate_cost,json=defaultPredicateCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"default_predicate_cost,omitempty" yaml:"default_predicate_cost"`
	// PredicateCosts is the list of predicates and their associated unit costs.
	PredicateCosts []PredicateCost `protobuf:"bytes,3,rep,name=predicate_costs,json=predicateCosts,proto3" json:"predicate_costs" yaml:"predicate_cost"`
}

func (m *GasPolicy) Reset()         { *m = GasPolicy{} }
func (m *GasPolicy) String() string { return proto.CompactTextString(m) }
func (*GasPolicy) ProtoMessage()    {}
func (*GasPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af0daa241de0fa3, []int{3}
}
func (m *GasPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPolicy.Merge(m, src)
}
func (m *GasPolicy) XXX_Size() int {
	return m.Size()
}
func (m *GasPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GasPolicy proto.InternalMessageInfo

func (m *GasPolicy) GetPredicateCosts() []PredicateCost {
	if m != nil {
		return m.PredicateCosts
	}
	return nil
}

// PredicateCost defines the unit cost of a predicate during its invocation by the interpreter.
type PredicateCost struct {
	// Predicate is the name of the predicate, optionally followed by its arity (e.g. "findall/3").
	// If no arity is specified, the unit cost is applied to all predicates with the same name.
	Predicate string `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty" yaml:"predicate"`
	// Cost is the unit cost of the predicate.
	Cost *github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=cost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"cost,omitempty" yaml:"cost",omitempty`
}

func (m *PredicateCost) Reset()         { *m = PredicateCost{} }
func (m *PredicateCost) String() string { return proto.CompactTextString(m) }
func (*PredicateCost) ProtoMessage()    {}
func (*PredicateCost) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af0daa241de0fa3, []int{4}
}
func (m *PredicateCost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredicateCost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredicateCost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredicateCost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredicateCost.Merge(m, src)
}
func (m *PredicateCost) XXX_Size() int {
	return m.Size()
}
func (m *PredicateCost) XXX_DiscardUnknown() {
	xxx_messageInfo_PredicateCost.DiscardUnknown(m)
}

var xxx_messageInfo_PredicateCost proto.InternalMessageInfo

func (m *PredicateCost) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "logic.v1beta2.Params")
	proto.RegisterType((*Limits)(nil), "logic.v1beta2.Limits")
	proto.RegisterType((*Interpreter)(nil), "logic.v1beta2.Interpreter")
	proto.RegisterType((*GasPolicy)(nil), "logic.v1beta2.GasPolicy")
	proto.RegisterType((*PredicateCost)(nil), "logic.v1beta2.PredicateCost")
}

func init() { proto.RegisterFile("logic/v1beta2/params.proto", fileDescriptor_3af0daa241de0fa3) }

var fileDescriptor_3af0daa241de0fa3 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0xe3, 0xa4, 0x0a, 0xf8, 0xa2, 0xfe, 0x3b, 0x52, 0x30, 0x81, 0x26, 0xd5, 0x75, 0xa0,
	0x03, 0x24, 0xa2, 0xa0, 0x0e, 0x95, 0x58, 0x5c, 0x44, 0xf9, 0x27, 0x88, 0x0e, 0x15, 0x10, 0x02,
	0x45, 0x17, 0xe7, 0xea, 0x9e, 0x1a, 0xe7, 0x2c, 0xdf, 0x85, 0x26, 0x5d, 0x90, 0x18, 0x98, 0x19,
	0x19, 0x59, 0xf8, 0x2e, 0x15, 0x53, 0x47, 0xc4, 0x10, 0xa1, 0xf6, 0x13, 0xd0, 0x95, 0x05, 0xf9,
	0x7c, 0xb1, 0x1d, 0xab, 0x12, 0x0a, 0x4b, 0x12, 0x3d, 0xef, 0xf3, 0xfe, 0x9e, 0xbb, 0xf3, 0x9b,
	0x33, 0xa8, 0x74, 0xb9, 0xcb, 0x9c, 0xc6, 0xfb, 0xdb, 0x6d, 0x2a, 0xc9, 0x7a, 0xc3, 0x27, 0x01,
	0xf1, 0x44, 0xdd, 0x0f, 0xb8, 0xe4, 0x70, 0x56, 0xd5, 0xea, 0xba, 0x56, 0x29, 0xbb, 0xdc, 0xe5,
	0xaa, 0xd2, 0x08, 0x7f, 0x45, 0x26, 0xf4, 0x31, 0x0f, 0x8a, 0x4d, 0xd5, 0x05, 0x5f, 0x83, 0x12,
	0xeb, 0x49, 0x1a, 0xf8, 0x01, 0x95, 0x34, 0xb0, 0x8c, 0x15, 0x63, 0xad, 0xb4, 0x5e, 0xa9, 0x4f,
	0x50, 0xea, 0x8f, 0x12, 0x87, 0x5d, 0x39, 0x1a, 0xd5, 0x72, 0x67, 0xa3, 0x1a, 0x1c, 0x12, 0xaf,
	0xbb, 0x89, 0x52, 0xcd, 0x08, 0xa7, 0x51, 0xf0, 0x3e, 0x28, 0x76, 0x99, 0xc7, 0xa4, 0xb0, 0xf2,
	0x0a, 0xba, 0x94, 0x81, 0x3e, 0x55, 0x45, 0x7b, 0x49, 0xf3, 0x66, 0x23, 0x5e, 0xd4, 0x82, 0xb0,
	0xee, 0x85, 0x18, 0x00, 0x97, 0x88, 0x96, 0xcf, 0xbb, 0xcc, 0x19, 0x5a, 0x05, 0x45, 0xb2, 0x32,
	0xa4, 0x6d, 0x22, 0x9a, 0xaa, 0x6e, 0x5f, 0xd5, 0xb0, 0xc5, 0x08, 0x96, 0x74, 0x22, 0x6c, 0xba,
	0x63, 0xd7, 0xe6, 0xcc, 0x97, 0xaf, 0xb5, 0x1c, 0xfa, 0x5e, 0x00, 0xc5, 0x68, 0x0d, 0xb0, 0x03,
	0x2e, 0x78, 0x64, 0xd0, 0x72, 0x89, 0x50, 0x07, 0x60, 0xda, 0x4f, 0x8e, 0x46, 0x35, 0xe3, 0xe7,
	0xa8, 0x76, 0xc3, 0x65, 0x72, 0xaf, 0xdf, 0xae, 0x3b, 0xdc, 0x6b, 0x38, 0x5c, 0x78, 0x5c, 0xe8,
	0xaf, 0x5b, 0xa2, 0xb3, 0xdf, 0x90, 0x43, 0x9f, 0x8a, 0xfa, 0x0e, 0xeb, 0xc9, 0xb3, 0x51, 0xcd,
	0x8a, 0x22, 0x35, 0x07, 0xdd, 0xe4, 0x1e, 0x93, 0xd4, 0xf3, 0xe5, 0x10, 0x17, 0x3d, 0x32, 0xd8,
	0x26, 0x02, 0xbe, 0x03, 0x17, 0xc3, 0xaa, 0x60, 0x87, 0x54, 0x6d, 0xc4, 0xb4, 0xed, 0xe9, 0x63,
	0xe6, 0x93, 0x98, 0x10, 0x84, 0x70, 0xb8, 0xf2, 0x17, 0xec, 0x90, 0x42, 0x09, 0x16, 0x42, 0x35,
	0xa0, 0xa2, 0xdf, 0x95, 0x2d, 0x87, 0xf7, 0x7b, 0x52, 0x9d, 0xbc, 0x69, 0x3f, 0x9e, 0x3e, 0xe6,
	0x4a, 0x12, 0x93, 0x06, 0x22, 0x3c, 0xe7, 0x91, 0x01, 0x56, 0xca, 0x56, 0x28, 0xc0, 0x0f, 0xa0,
	0x1c, 0x9a, 0xfa, 0x82, 0x06, 0x2d, 0xde, 0x97, 0x7e, 0x5f, 0x46, 0x1b, 0x9c, 0x51, 0xc9, 0xcf,
	0xa6, 0x4f, 0xbe, 0x96, 0x24, 0x67, 0xa1, 0x08, 0x2f, 0x7a, 0x64, 0xb0, 0x23, 0x68, 0xf0, 0x5c,
	0x89, 0xe1, 0xb6, 0xd5, 0xc3, 0x34, 0xd0, 0x1f, 0x03, 0x94, 0x52, 0x53, 0x0a, 0x5f, 0x82, 0xb2,
	0x1f, 0xd0, 0x0e, 0x73, 0x88, 0xa4, 0xa2, 0x75, 0xb0, 0xc7, 0x24, 0xed, 0x32, 0x21, 0x2d, 0x63,
	0xa5, 0xb0, 0x66, 0xda, 0xab, 0xe1, 0xb2, 0x92, 0xac, 0xf3, 0x9c, 0x08, 0x5f, 0x4a, 0xe4, 0x57,
	0x63, 0x35, 0xc3, 0x6d, 0x77, 0x89, 0xb3, 0xaf, 0xb8, 0xf9, 0x7f, 0x70, 0x63, 0xe7, 0x04, 0xd7,
	0x1e, 0xab, 0x70, 0x03, 0x98, 0x6d, 0xce, 0xa5, 0x90, 0x01, 0xf1, 0xf5, 0x70, 0x58, 0x1a, 0xb6,
	0x10, 0xc1, 0xe2, 0x32, 0xc2, 0x89, 0x55, 0xef, 0xfe, 0x77, 0x1e, 0x98, 0xf1, 0x9f, 0x00, 0xf6,
	0xc1, 0xc2, 0x01, 0x65, 0xee, 0x9e, 0x64, 0x3d, 0xb7, 0xb5, 0x4b, 0x1c, 0xc9, 0x03, 0x3d, 0xd6,
	0xff, 0x3f, 0x08, 0x59, 0x20, 0xc2, 0xf3, 0xb1, 0xf4, 0x40, 0x29, 0xf0, 0x93, 0x01, 0x2e, 0x77,
	0xe8, 0x2e, 0x09, 0x87, 0x25, 0xde, 0x62, 0xcb, 0xe1, 0x62, 0x3c, 0x86, 0xcd, 0xe9, 0xd3, 0x97,
	0xa3, 0xf4, 0xf3, 0xb1, 0x08, 0x97, 0x75, 0xa1, 0x39, 0xd6, 0xb7, 0xb8, 0x90, 0xb0, 0x03, 0xe6,
	0x27, 0x8d, 0xc2, 0x2a, 0xac, 0x14, 0xd6, 0x4a, 0xeb, 0xd7, 0x33, 0xf7, 0xc6, 0x44, 0x9b, 0xbd,
	0xac, 0xef, 0x8e, 0xa5, 0xcc, 0xc3, 0xd3, 0x59, 0x73, 0x7e, 0xda, 0x2d, 0xd0, 0x37, 0x03, 0xcc,
	0x4e, 0xe6, 0x6e, 0x00, 0x33, 0xf6, 0xe8, 0x03, 0xcf, 0x3c, 0xc3, 0xb8, 0x8c, 0x70, 0x62, 0x85,
	0x6f, 0xc1, 0x4c, 0xea, 0x94, 0x1e, 0x4e, 0x7f, 0x4a, 0x7a, 0xc5, 0x6a, 0x9d, 0xa9, 0x7b, 0x47,
	0x51, 0xed, 0x7b, 0x47, 0x27, 0x55, 0xe3, 0xf8, 0xa4, 0x6a, 0xfc, 0x3a, 0xa9, 0x1a, 0x9f, 0x4f,
	0xab, 0xb9, 0xe3, 0xd3, 0x6a, 0xee, 0xc7, 0x69, 0x35, 0xf7, 0x66, 0x35, 0x95, 0xc0, 0xf7, 0xfd,
	0xbb, 0xea, 0xa3, 0xd3, 0x18, 0x34, 0xa2, 0xd7, 0x8b, 0x8a, 0x68, 0x17, 0xd5, 0x1b, 0xe3, 0xce,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x56, 0x08, 0x95, 0x74, 0x06, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Interpreter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Limits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Limits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxUserOutputSize != nil {
		{
			size := m.MaxUserOutputSize.Size()
			i -= size
			if _, err := m.MaxUserOutputSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxSize != nil {
		{
			size := m.MaxSize.Size()
			i -= size
			if _, err := m.MaxSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxResultCount != nil {
		{
			size := m.MaxResultCount.Size()
			i -= size
			if _, err := m.MaxResultCount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MaxGas != nil {
		{
			size := m.MaxGas.Size()
			i -= size
			if _, err := m.MaxGas.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interpreter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interpreter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interpreter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bootstrap) > 0 {
		i -= len(m.Bootstrap)
		copy(dAtA[i:], m.Bootstrap)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Bootstrap)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PredicatesBlacklist) > 0 {
		for iNdEx := len(m.PredicatesBlacklist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PredicatesBlacklist[iNdEx])
			copy(dAtA[i:], m.PredicatesBlacklist[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.PredicatesBlacklist[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PredicatesWhitelist) > 0 {
		for iNdEx := len(m.PredicatesWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PredicatesWhitelist[iNdEx])
			copy(dAtA[i:], m.PredicatesWhitelist[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.PredicatesWhitelist[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GasPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PredicateCosts) > 0 {
		for iNdEx := len(m.PredicateCosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PredicateCosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DefaultPredicateCost != nil {
		{
			size := m.DefaultPredicateCost.Size()
			i -= size
			if _, err := m.DefaultPredicateCost.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WeightingFactor != nil {
		{
			size := m.WeightingFactor.Size()
			i -= size
			if _, err := m.WeightingFactor.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PredicateCost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredicateCost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PredicateCost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cost != nil {
		{
			size := m.Cost.Size()
			i -= size
			if _, err := m.Cost.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Predicate) > 0 {
		i -= len(m.Predicate)
		copy(dAtA[i:], m.Predicate)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Predicate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Interpreter.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Limits.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.GasPolicy.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Limits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGas != nil {
		l = m.MaxGas.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxResultCount != nil {
		l = m.MaxResultCount.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxSize != nil {
		l = m.MaxSize.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxUserOutputSize != nil {
		l = m.MaxUserOutputSize.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Interpreter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PredicatesWhitelist) > 0 {
		for _, s := range m.PredicatesWhitelist {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PredicatesBlacklist) > 0 {
		for _, s := range m.PredicatesBlacklist {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.Bootstrap)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *GasPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeightingFactor != nil {
		l = m.WeightingFactor.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DefaultPredicateCost != nil {
		l = m.DefaultPredicateCost.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.PredicateCosts) > 0 {
		for _, e := range m.PredicateCosts {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *PredicateCost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Cost != nil {
		l = m.Cost.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interpreter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interpreter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.MaxGas = &v
			if err := m.MaxGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.MaxResultCount = &v
			if err := m.MaxResultCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.MaxSize = &v
			if err := m.MaxSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUserOutputSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.MaxUserOutputSize = &v
			if err := m.MaxUserOutputSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interpreter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interpreter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interpreter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicatesWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicatesWhitelist = append(m.PredicatesWhitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicatesBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicatesBlacklist = append(m.PredicatesBlacklist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootstrap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightingFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.WeightingFactor = &v
			if err := m.WeightingFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPredicateCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.DefaultPredicateCost = &v
			if err := m.DefaultPredicateCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateCosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateCosts = append(m.PredicateCosts, PredicateCost{})
			if err := m.PredicateCosts[len(m.PredicateCosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredicateCost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredicateCost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredicateCost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.Cost = &v
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
